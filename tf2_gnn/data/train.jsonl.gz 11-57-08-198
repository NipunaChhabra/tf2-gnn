{"graph": {"node_labels": ["public void openConnection(conn url, String proxy", "conn urlConnection = url.initilize()", "if (proxy != null)", "urlConnection = (HttpURLConnection) u.openConnection(proxy)", "urlConnection = (HttpURLConnection) u.openConnection()", "urlConnection.setRequestProperty(\"User-Agent\", userAgent)"], "node_features": [], "adjacency_lists": [[[0, 1], [0, 2], [2, 3], [2, 4], [0, 5]],[[1, 3], [1, 4], [1, 5], [3, 5], [4, 5]]]}}
{"graph": {"node_labels": ["public void setupConnection(Context context, URL url, ConnectionCallback callback)", "HttpURLConnection conn = (HttpURLConnection) url.openConnection()", "conn.setInstanceFollowRedirects(false)", "conn = (HttpURLConnection) url.openConnection()", "conn.setDoInput(true)", "addAuthentication(context, conn)"], "node_features": [], "adjacency_lists": [[[0, 1], [0, 2], [0, 4], [0, 5]],[[1, 2], [3, 2], [1, 4], [3, 4], [1, 5], [3, 5]]]}}
{"graph": {"node_labels": ["public void assign(HashMap<String, DBIDs> labelMap, String label, DBIDRef id)", "if (labelMap.containsKey(label))", "DBIDs exist = labelMap.get(label)", "if (exist instanceof DBID)", "ModifiableDBIDs n = DBIDUtil.newHashSet()", "n.add(id)", "labelMap.put(label, n)", "((ModifiableDBIDs) exist).add(id)", "labelMap.put(label, DBIDUtil.deref(id))"], "node_features": [], "adjacency_lists": [[[0, 1], [1, 2], [1, 3], [3, 4], [3, 5], [3, 6], [3, 7], [1, 8]], [[2, 3], [4, 5], [4, 6]]]}}